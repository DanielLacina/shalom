{% if schema.context.types.enums | length > 0 %}
import "schema.shalom.dart";
{% endif %}
import 'dart:convert';

enum OperationType {
    Query,
    Mutation,
    Subscription
};

class Request {
    final String query;
    final JsonObject variables;
    final OperationType opType;
    final String StringopName;

    Request ({
        required this.query,
        required this.variables,
        required this.opType,
        required this.StringopName
    });
    
}

class Response {
    final JsonObject data;
    final String opName;

    Response({
        required this.data,
        required this.opName
    });
} 

abstract class Requestable {
    Request toRequest();
}

abstract class Link {
    Future<Response> request(Request request)
}

{% set root_selection = operation.context.root_type.selection_name %}
{% macro base_object_impl(typename, selections) %}
    /// class members
    {% for selection in selections -%}
        {% set selection_name = selection.selection_name %}
        {% if selection.kind == "Object" %}
            final {{ type_name_for_selection(selection) }} {{ selection_name }};
        {% elif selection.kind == "Scalar" %}
            final {{ type_name_for_selection(selection) }} {{ selection_name }};
        {% elif selection.kind == "Enum" %}
            final {{ type_name_for_selection(selection) }} {{ selection_name }};
        {% else %}
            throw NotImplemented();
        {% endif %}
    {% endfor %}
    const JsonObject variables = {
        {% for %}
    }
    // keywordargs constructor
    {{ typename }}({
    {% for selection in selections -%}
        {% if not selection.is_optional %}required{% endif %}
        this.{{ selection.selection_name }},
    {% endfor %}
    });
    static {{ typename }} fromJson(JsonObject data) {
    {% for selection in selections -%}
        {% set selection_name = selection.selection_name %}
        {% if selection.kind == "Object" %}
            final {{ type_name_for_selection(selection) }} {{ selection_name }}_value;
            {% if selection.is_optional %}
                final JsonObject? {{ selection_name }}$raw = data['{{ selection_name }}']; 
                if ({{ selection_name }}$raw != null) {
                    {{ selection_name }}_value = {{ selection.full_name }}.fromJson({{ selection_name }}$raw);
                } else {
                    {{ selection_name }}_value = null;
                }
            {% else %}
                {{ selection_name }}_value = {{ selection.full_name }}.fromJson(data['{{ selection_name }}']);            
            {% endif %}
        {% elif selection.kind == "Scalar" %}
            final {{ type_name_for_selection(selection) }} {{ selection_name }}_value = data['{{ selection_name }}'];
        {% elif selection.kind == "Enum" %}
            {% set typename = selection.concrete_type.name %}
            final {{ type_name_for_selection(selection) }} {{ selection_name }}_value;
            {% if selection.is_optional %}
                final String? {{ selection_name }}$raw = data['{{ selection_name }}']; 
                if ({{ selection_name }}$raw != null) {
                    {{ selection_name }}_value = {{ typename }}.fromString({{ selection_name }}$raw);
                } else {
                    {{ selection_name }}_value = null;
                }
            {% else %}
                {{ selection_name }}_value = {{ typename }}.fromString(data['{{ selection_name }}']);            
            {% endif %}
        {% else %}
            throw NotImplemented();
        {% endif %}
    {% endfor %}
    return {{ typename }}(
    {% for selection in selections %}
        {% set selection_name = selection.selection_name %}
        {{ selection_name }}: {{ selection_name }}_value,
    {% endfor %}
    );
    }
    {{ typename }} updateWithJson(JsonObject data) {
    {% for selection in selections -%}
        {% set selection_name = selection.selection_name %}
        {% if selection.kind == "Object" %}
        final {{ type_name_for_selection(selection) }} {{ selection_name }}_value;
        if (data.containsKey('{{ selection_name }}')) {
            {% if selection.is_optional %}
                final JsonObject? {{ selection_name }}$raw = data['{{ selection_name }}']; 
                if ({{ selection_name }}$raw != null) {
                    {{ selection_name }}_value = {{ selection.full_name }}.fromJson({{ selection_name }}$raw);
                } else {
                    {{ selection_name }}_value = null;
                }
            {% else %}
                {{ selection_name }}_value = {{ selection.full_name }}.fromJson(data['{{ selection_name }}']);            
            {% endif %}
        } else {
            {{ selection_name }}_value = {{ selection_name }};
        }
        {% elif selection.kind == "Scalar" %}
            final {{ type_name_for_selection(selection) }} {{ selection_name }}_value;
            if (data.containsKey('{{ selection_name }}')) {
            {{ selection_name }}_value = data['{{ selection_name }}'];
            } else {
            {{ selection_name }}_value = {{ selection_name }};
            }
        {% elif selection.kind == "Enum" %}
            {% set typename = selection.concrete_type.name %}
            final {{ type_name_for_selection(selection) }} {{ selection_name }}_value;
            if (data.containsKey('{{ selection_name }}')) {
                {% if selection.is_optional %}
                    final String? {{ selection_name }}$raw = data['{{ selection_name }}']; 
                    if ({{ selection_name }}$raw != null) {
                        {{ selection_name }}_value = {{ typename }}.fromString({{ selection_name }}$raw);
                    } else {
                        {{ selection_name }}_value = null;
                    }
                {% else %}
                    {{ selection_name }}_value = {{ typename }}.fromString(data['{{ selection_name }}']);            
                {% endif %}
            } else {
                {{ selection_name }}_value = {{ selection_name }};
            }
        {% else %}
            throw NotImplemented();
        {% endif %}
    {% endfor %}
    return {{ typename }}(
    {% for selection in selections %}
        {% set selection_name = selection.selection_name %}
        {{ selection_name }}: {{ selection_name }}_value,
    {% endfor %}
    );
    }
    @override
    bool operator ==(Object other) {
    return identical(this, other) ||
    (other is {{ typename }} &&
    {% for selection in selections -%}
        {% set selection_name = selection.selection_name %}
        other.{{ selection_name }} == {{ selection_name }} {{ "&&"|if_not_last(loop.last) }}
    {% endfor %}
    );
    }
    @override
    int get hashCode =>
    {% if selections | length > 1 %}
        Object.hashAll([
        {% for selection in selections %}
            {% set selection_name = selection.selection_name %}
            {{ selection_name }},
        {% endfor %}
        ]);
    {% else %}
        {{ (selections | first).selection_name }}.hashCode;
    {% endif %}
    JsonObject toJson() {
    return {
    {% for selection in selections %}
        {% set selection_name = selection.selection_name %}
        '{{ selection_name }}':
            {% if selection.kind == "Object" %}
                {{ selection_name }}{% if selection.is_optional %}?{% endif %}.toJson()
            {% elif selection.kind == "Scalar" %}
                {{ selection_name }}
            {% elif selection.kind == "Enum" %}
                {{ selection_name }}{% if selection.is_optional %}?{% endif %}.name  
            {% else %}
                throw NotImplemented();
            {% endif %}
        ,
    {% endfor %}
    };
    }

{% endmacro %}
typedef JsonObject = Map<String, dynamic>;
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types



{% set root_type_name %}
    {{ root_selection }}
{% endset %}
class {{ root_type_name }} extends Requestable {
{{ base_object_impl(root_type_name, operation.context.root_type.selections) }}
    Request toRequest(JsonObject variables) {
        final jsonEncoder = JsonEncoder();
        String queryString = jsonEncoder.convert(toJson()); 
        Request(
            query: queryString, 
            variables: variables, 
            opType: OperationType.Query, 
            StringopName: "{{ root_selection }}"
        )
    }
}

// ------------ OBJECT DEFINITIONS -------------

{% for full_name, selection in operation.context.type_defs | items  if selection.kind == "Object" %}
    class {{ full_name }}  {
        {{ base_object_impl(full_name, selection.selections) }}
    }
{% endfor %}



